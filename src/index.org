#+TITLE:     Building an application for the Analytics of Virtual Labs
#+AUTHOR:    VLEAD
#+DATE:      2015-09-09 Wed
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org

* Introduction
  This model describes a simple web application which displays the analytics of
  virtual-labs.
* Requirements
** Requirement #0
   The "visitor page views" count of the labs deployed on Amazon Web Services(AWS) and IIIT infrastructure from both AWS and
   local deployment must be displayed on [[www.vlabs.ac.in][vlabs web page]]. The "visitor page views" count must be updated every one hour.
** Requirement #1
   Each hit to a  simulation is a Usage Instance.
** Requirement #2
   Hits = {hc, hs}
   where,
   hc = hit to an experiment content page.
   hs = hit to the same experiment simulation page.
   hc.ip = hs.ip
   
* Design
** Design description
   This model builds a web service that provides endpoints to get
   different sets of information from the statistics generated by
   awstats and apache logs. A four tier architecture is built with the
   following components :
   - data : the specific data based on the requirement.
   - service : data processing and service to provide data
   - view : presentation of data.
   The tiers in the architecture are :
   + Collation of data
   + Parsing of data 
   + Service to provide data
   + Presentation of data
   
   The design of the architecture is depicted in the diagram below.
   
   #+CAPTION:  Design diagram
   #+LABEL:  Design diagram
   [[./diagrams/analytics.png]]

   The analytics service as shown in the above diagram has inputs
   coming from two sources. The first source is from the log files
   generated by the apache web server. The other input to the service is the awstats text
   files.
** Collation of data
    Collation of data can be found in the [[systems model]].
** TODO Parsing of data
** Service to provide data
    A service exposes different endpoints. Currently the endpoint that
    is exposed provides total number of pages, usage. 
** Presentation
    To display the analytics on [[www.vlabs.ac.in]] web page, Ajax call to the service is made from vlabs.ac.in web page
    and required service will return the calculated value in the form of json.
   
* Implementation
** TODO Parsing of data for Usage extraction
** Building the Service
   + For building the service, python-flask is used.
   Flask is a micro web application framework written in Python.
   more details about flask can be found [[http://flask.pocoo.org/docs/0.10/][here]].

   + This service, in its present state, will parse the data, extract
   aws-stats, calculate and return the total number of page visits.
   It exposes one endpoint =/numberofhits=.  An "endpoint" is an 
   identifier that is used in determining what logical unit of code
   should handle the request. 

#+BEGIN_SRC python :tangle analytics/app.py
from flask import Flask, render_template, request, jsonify, make_response
# import the flask extension
from flask.ext.cache import Cache
import json
#import os
#import config
#from data import extract_data
#from data.extract_data import *
from extract_data import *
#+END_SRC

Create an instance of the class(Flask). The argument is the name of
the applicationâ€™s module or package.  This is needed so that Flask
knows where to look for templates, static files, and so on.

#+BEGIN_SRC python :tangle analytics/app.py
app = Flask(__name__)
#+END_SRC

  Define the cache config keys.

#+BEGIN_SRC python :tangle analytics/app.py
app.config['CACHE_TYPE'] = 'simple'
#+END_SRC

  Register the cache instance and bind it to app. 

#+BEGIN_SRC python :tangle analytics/app.py
app.cache = Cache(app)
#+END_SRC

  Register the cache instance and bind it to app. 

Use the =route()= decorator to tell Flask what URL should trigger the
function.

#+BEGIN_SRC python :tangle analytics/app.py
@app.route('/numberofhits')
#+END_SRC

 Cache this view for 1 hour. This is needed because the service must
 display the updated count every one hour.

#+BEGIN_SRC python :tangle analytics/app.py
@app.cache.cached(timeout=360)  
#+END_SRC

 The function is given a name which is also used to generate URLs
 for that particular function, and returns the value we want to
 display in the browser.
 
#+BEGIN_SRC python :tangle analytics/app.py
def numberofhits():
#+END_SRC

 Call the function =grand_total()= which is defined in
 =extract_data.py= to get the total number of hits.
  
#+BEGIN_SRC python :tangle analytics/app.py
    numberofhits  = grand_total()
#+END_SRC

   The =make_response()= function can be called instead of using a return
   and will get a response object which can be used to attach headers.
   =Access-Control-Allow-Origin= is a CORS (Cross-Origin Resource
   Sharing) header.  When Site A tries to fetch content from Site B,
   Site B can send an =Access-Control-Allow-Origin= response header to
   tell the browser that the content of this page is accessible to
   certain origins.  By default, Site B's pages are not accessible to
   any other origin, using the =Access-Control-Allow-Origin= header
   opens a door for cross-origin access by specific requesting
   origins.  The server can give permission to include cookies by
   setting the =Access-Control-Allow-Credentials= header.

#+BEGIN_SRC python :tangle analytics/app.py
    response = make_response(numberofhits)
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response
#+END_SRC
   Similary, usage count will get from the following end point.
#+BEGIN_SRC python :tangle analytics/app.py
@app.route('/usage')
@app.cache.cached(timeout=360)  
def usagehits():
    usage_count  = total_usage()
    response = make_response(usage_count)
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response
#+END_SRC

   Finally, use the =run()= function to run the local server with
   our application. The if *__name__ == '__main__':* makes sure the
   server only runs if the script is executed directly from the Python
   interpreter and not used as an imported module.  

#+BEGIN_SRC python :tangle analytics/app.py
if __name__ == '__main__':
    app.run(port=5000, debug=True)
#+END_SRC
*** Provisioning the Service
***** Machine Configuration
   + Operating System: centos-6.6
   + Architecture: x86_64
   + Memory: 256 MB
   + Disk space: 10 GB
   + Interface: venet0
***** Steps to manually create a centos container 
#+BEGIN_SRC 
vzctl create 16133 --ostemplate centos-6-x86_64-point6 --ipadd 10.4.15.133 
--diskspace 10G:15.0G --hostname stats-demo.vlabs.ac.in
vzctl start 16133
vzctl set 16133 --nameserver inherit --ram 256M --swap 512M --onboot yes --save
#+END_SRC
***** Export proxy Settings
#+BEGIN_SRC 
export http_proxy="proxy.iiit.ac.in:8080"
export https_proxy="proxy.iiit.ac.in:8080"
#+END_SRC    
***** Update the System
    In order to have a stable deployment server, it is crucial to keep things up-to-date and well maintained.
    To ensure that we have the latest available versions of default applications, we need to update our system.
    Run the following command to update your system
#+BEGIN_SRC 
sudo yum -y update
#+END_SRC
***** Install virtualenv
    Run the following command to download and install virtualenv using pip.
    =virtualenv= is a tool to create isolated Python environments.
#+BEGIN_SRC 
sudo pip install virtualenv
#+END_SRC
***** Install epel For RHEL 6.x and CentOS 6.x (x86_64)
#+BEGIN_SRC 
rpm -ivh http://dl.fedoraproject.org/pub
/epel/6/x86_64/epel-release-6-8.noarch.rpm
#+END_SRC
***** Install pip with yum command
#+BEGIN_SRC 
yum install -y python-pip
#+END_SRC
***** Install Flask
   Enter the following command to get Flask activated in your =virtualenv=
#+BEGIN_SRC 
 pip install Flask
#+END_SRC
***** Install Flask-Cache
#+BEGIN_SRC 
 pip install Flask-Cache
#+END_SRC
***** Install wsgi on CentOS using yum
   WSGI(Web Server Gateway Interface) is an interface between a web server 
   and the application itself. It exists to ensure a standardized way 
   between various servers and applications (frameworks) to work with each 
   other, allowing interchangeability when necessary (e.g. switching from 
   development to production environment).
#+BEGIN_SRC 
yum install mod_wsgi
#+END_SRC

***** Create a =.wsgi= file
    To run your application you need a =analytics.wsgi= file. 
    This file contains the code =mod_wsgi= is executing on startup to get the application object. 
    The object called application in that file is then used as application.
#+BEGIN_SRC  python :tangle analytics/analytics.wsgi
import sys
sys.path.insert (0,'/var/www/html/analytics/')

import logging, sys
logging.basicConfig(stream=sys.stderr)

from app import app as application
 #+END_SRC
***** Configure the Apache and deploy the service
      Configure Apache to load =mod_wsgi= module and your project in VirtualHost
      Insert the following lines in =/etc/httpd/conf/httpd.conf=
#+BEGIN_SRC 
WSGIScriptAlias / /var/www/html/analytics/analytics.wsgi
WSGIScriptReloading On
<Directory /var/www/html/analytics>
     Order deny,allow
     Allow from all
 </Directory>

#+END_SRC
***** Restart Apache
#+BEGIN_SRC 
service httpd restart
#+END_SRC
***** Test the service with end point.
#+BEGIN_SRC 
http://10.4.15.133/numberofhits
#+END_SRC

** Presenting the data
   For presenting the data, AJAX (Asynchronous JavaScript and
   XML)and HTML(HyperText Markup Language) is used. 
   AJAX allows web pages to be updated asynchronously by
   exchanging small amounts of data with the server. This means that
   it is possible to update parts of a web page, without reloading the
   whole page. The code snippet below will call the endpoint
   =/numberofhits= and =/usage=, where it will return the total number of pages 
   visited and usage as a response and displays on browser.

#+BEGIN_SRC html :tangle analytics/html-code/index.html 
<html>
   <head>
      <title>Analytics</title>
      <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
      <script type="text/javascript" language="javascript">
         //$(document).ready(function() {
         window.onload = function() {
               $.getJSON('http://stats-demo.vlabs.ac.in/numberofhits', function(data) {
                  $("#analytics").html("<p><b>Page hits since 2013: " + data + "</b></p>");
                  });            
                  $.getJSON('http://stats-demo.vlabs.ac.in/usagehits', function(data) {
                  $("#usage").html("<p><b>Usage hits since 2013: " + data + "</b></p>");

              });
         };
      </script>
     </head>
   <body>
      <div id="analytics">
         Analytics
      </div>
      <div id="usage">
         Usage
      </div>
   </body>
</html>
#+END_SRC

   Note: If you want to display the total number of page visits and usage on vlab.co.in, 
   then add the above code snippet in =index.html= file. 
*  TODO Test Cases
  A test case is a document, which has a set of test data,
  preconditions, expected results and post-conditions, developed for a
  particular test scenario in order to verify compliance against a
  specific requirement.
** Objective:
** Test case ID: TC01
** Test case name: 
** Test case description:
** Test data/Input data:
** Step description/action
*** Step 1:
** Expected Result
  
* Releases
** Release v1.0.0
   This release realizes [[Requirement #0]]
   The release date is [2015-07-08 Wed]
** Release v1.0.1
   This release realizes [[Requirement #1]].
   The release date is: [2015-08-31 Mon]
** Release v1.0.2
   This release realizes [[Requirement #2]].
   The release date is: [2015-09-21 Mon]
   


